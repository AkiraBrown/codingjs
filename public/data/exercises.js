/**
 * Excercise data converted from nodingbat
 */

// TODO:10 fill this out

const exercises = [{
  title: 'Warmup-1',
  name: 'sleepIn',
  question: `The parameter weekday is true if it is a weekday, and the parameter
     vacation is true if we are on vacation. We sleep in if it is not a weekday or
     we're on vacation. Return true if we sleep in.`,
  inputs: [
    '(true, true)',
    '(true, false)',
    '(false, true)',
    '(false, false)',
  ],
}, {
  title: 'Warmup-1',
  name: 'monkeyTrouble',
  question: `We have two monkeys, a and b, and the parameters aSmile and
          bSmile indicate if each is smiling. We are in trouble if they are both smiling
          or if neither of them is smiling. Return true if we are in trouble.`,
  inputs: [
    '(true, true)',
    '(false, false)',
    '(true, false)',
    '(false, true)',
  ],
}, {
  title: 'Warmup-1',
  name: 'sumDouble',
  question: `Given two int values, return their sum. Unless the two values are the same,
   then return double their sum.`,
  inputs: [
    '(1, 2)',
    '(3, 2)',
    '(2, 2)',
    '(-1, 0)',
    '(3, 3)',
    '(0, 0)',
    '(0, 1)',
    '(3, 4)',
  ],
}, {
  title: 'Warmup-1',
          	name: 'diff21',
  question: `Given an int n, return the absolute difference between n and 21,
            except return double the absolute difference if n is over 21.`,
  inputs: [
    '(19)',
    '(10)',
    '(21)',
    '(22)',
    '(25)',
    '(30)',
    '(0)',
    '(1)',
    '(2)',
    '(-1)',
    '(-2)',
    '(50)',
  ],
}, {
  title: 'Warmup-1',
  name: 'parrotTrouble',
  question: `We have a loud talking parrot. The "hour" parameter is the current hour time in the range 0..23.
We are in trouble if the parrot is talking and the hour is before 7 or after 20.
Return true if we are in trouble.`,
  inputs: [
    '(true, 6)',
    '(true, 7)',
    '(false, 6)',
    '(true, 21)',
    '(false, 21)',
    '(true, 23)',
    '(false, 23)',
    '(true, 20)',
    '(false, 12)',
  ],
}, {
  title: 'Warmup-1',
  name: 'makes10',
  question: 'Given 2 ints, a and b, return true if one if them is 10 or if their sum is 10.',
  inputs: [
    '(9, 10)',
    '(9, 9)',
    '(1, 9)',
    '(10, 1)',
    '(10, 10)',
    '(8, 2)',
    '(8, 3)',
    '(10, 42)',
    '(12, -2)',
  ],
}, {
  title: 'Warmup-1',
  name: 'nearHundred',
  question: `Given an int n, return true if it is within 10 of 100 or 200.
            Note: Math.abs(num) computes the absolute value of a number.`,
  inputs: [
    '(93)',
    '(90)',
    '(89)',
    '(110)',
    '(111)',
    '(121)',
    '(0)',
    '(5)',
    '(191)',
    '(189)',
  ],
}, {
  title: 'Warmup-1',
  name: 'posNeg',
  question: `Given 2 int values, return true if one is negative and one is positive.
      Except if the parameter "negative" is true, then return true only if both are negative.`,
  inputs: [
    '(1, -1, false)',
    '(-1, 1, false)',
    '(-4, -5, true)',
    '(-4, -5, false)',
    '(-4, 5, false)',
    '(-4, 5, true)',
    '(1, 1, false)',
    '(-1, -1, false)',
    '(1, -1, true)',
    '(-1, 1, true)',
    '(1, 1, true)',
    '(-1, -1, true)',
    '(5, -5, false)',
    '(-6, 6, false)',
    '(-5, -6, false)',
    '(-2, -1, false)',
    '(1, 2, false)',
    '(-5, 6, true)',
    '(-5, -5, true)',
  ],
}, {
  title: 'Warmup-1',
  name: 'notString',
  question: `Given a string, return a new string where "not " has been added to the front. However,
  if the string already begins with "not", return the string unchanged. Note: use .equals() to
  compare 2 strings.`,
  inputs: [
    "('candy')",
    "('x')",
    "('not bad')",
    "('bad')",
    "('not')",
    "('is not')",
    "('no')",
  ],
}, {
  title: 'Warmup-1',
  name: 'missingChar',
  question: `Given a non-empty string and an int n, return a new string where the char at index n has been removed.
The value of n will be a valid index of a char in the original string (i.e. n will be in the range
  0..str.length()-1 inclusive).`,
  inputs: [
    "('kitten', 1)",
    "('kitten', 0)",
    "('kitten', 4)",
    "('Hi', 0)",
    "('Hi', 1)",
    "('code', 0)",
    "('code', 1)",
    "('code', 2)",
    "('code', 3)",
    "('chocolate', 8)",
  ],
}, {
  title: 'Warmup-1',
  name: 'frontBack',
  question: `Given a string, return a new string where the first and last chars have
        been exchanged.`,
  inputs: [
    "('code')",
    "('a')",
    "('ab')",
    "('abc')",
    "('')",
    "('Chocolate')",
    "('aavj')",
    "('hello')",
  ],
}, {
  title: 'Warmup-1',
  name: 'front3',
  inputs: [
    "('Java')",
    "('Chocolate')",
    "('abc')",
    "('abcXYZ')",
    "('ab')",
    "('a')",
    "('')",
  ],
  question: `Given a string, we'll say that the front is the first 3 chars of the string.
          If the string length is less than 3, the front is whatever is there. Return a new
          string which is 3 copies of the front.`,
}, {
  title: 'Warmup1',
  name: 'backAround',
  inputs: [
    "('cat')",
    "('Hello')",
    "('a')",
    "('abc')",
    "('read')",
    "('boo')",
  ],
  question: `Given a string, take the last char and return a new string with the last
          char added at the front and back, so 'cat' yields 'tcatt' The original string will be
          length 1 or more.`,
}, {
  title: 'Warmup-1',
  name: 'or35',
  inputs: [
    '(3)',
    '(10)',
    '(8)',
    '(15)',
    '(5)',
    '(4)',
    '(9)',
    '(4)',
    '(7)',
    '(6)',
    '(17)',
    '(18)',
    '(29)',
    '(20)',
    '(21)',
    '(22)',
    '(45)',
    '(99)',
    '(100)',
    '(101)',
    '(121)',
    '(122)',
    '(123)',
  ],
  question: `Return true if the given non-negative number is a multiple of 3 or a
          multiple of 5. (Hint: Use the % 'mod' operator)`,
}, {
  title: 'Warmup-1',
  name: 'front22',
  inputs: [
    "('kitten')",
    "('Ha')",
    "('abc')",
    "('ab')",
    "('a')",
    "('')",
    "('Logic')",
  ],
  question: `Given a string, take the first 2 chars and return the string with the 2
          chars added at both the front and back, so 'kitten' yields 'kikittenki' chars are
          there.`,
}, {
  title: 'Warmup-1',
  name: 'startHi',
  inputs: [
    "('hi there')",
    "('hi')",
    "('hello hi')",
    "('he')",
    "('h')",
    "('')",
    "('ho hi')",
    "('hi ho')",
  ],
  question: `Given a string, return true if the string starts with 'hi'and
          false otherwise.`,
}, {
  title: 'Warmup-1',
  name: 'icyHot',
  inputs: [
    '(120, -1)',
    '(-1, 120)',
    '(2, 120)',
    '(-1, 100)',
    '(-2, 120)',
    '(120, 120)',
  ],
  question: `Given two temperatures, return true if one is less than 0 and the
            other is greater than 100.`,
}, {
  title: 'Warmup-1',
  name: 'in1020',
  inputs: [
    '(12, 99)',
    '(21, 12)',
    '(8, 99)',
    '(99, 10)',
    '(20, 20)',
    '(21, 21)',
    '(9, 9)',
  ],
  question: `Given 2 int values, return true if either of them is in the range
            10..20 inclusive.`,
}, {
  title: 'Warmup-1',
  name: 'hasTeen',
  inputs: [
    '(13, 20, 10)',
    '(20, 19, 10)',
    '(20, 10, 13)',
    '(1, 20, 12)',
    '(19, 20, 12)',
    '(12, 20, 19)',
    '(12, 9, 20)',
    '(12, 18, 20)',
    '(14, 2, 20)',
    '(4, 2, 20)',
    '(11, 22, 22)',
  ],
  question: `We'll say that a number is 'teen' if it is in the range 13..19 inclusive. Given 3 int values,
              return true if 1 or more of them are teen.`,
}, {
  title: 'Warmup-1',
  name: 'loneTeen',
  inputs: [
    '(13, 99)',
    '(21, 19)',
    '(13, 13)',
    '(14, 20)',
    '(20, 15)',
    '(16, 17)',
    '(16, 9)',
    '(16, 18)',
    '(13, 19)',
    '(13, 20)',
    '(6, 18)',
    '(99, 13)',
    '(99, 99)',
  ],
  question: `We'll say that a number is 'teen' if it is in the range 13..19 inclusive.
              Given 2 int values, return true if one or the other is teen, but not both.`,
}, {
  title: 'Warmup-1',
  name: 'delDel',
  inputs: [
    "('adelbc')",
    "('adelHello')",
    "('abcdel')",
    "('add')",
    "('ad')",
    "('a')",
    "('')",
    "('del')",
    "('adel')",
    "('aadelbb')",
  ],
  question: `Given a string, if the string "del" appears starting at index 1,
                return a string where that "del" has been deleted. Otherwise, return the string
                unchanged.`,
}, {
  title: 'Warmup-1',
  name: 'mixStart',
  inputs: [
    "('mix snacks')",
    "('pix snacks')",
    "('piz snacks')",
    "('nix')",
    "('ni')",
    "('n')",
  ],
  question: `Return true if the given string begins with 'mix', except the 'm' can be
                anything, so 'pix', '9ix' .. all count.`,
}, {
  title: 'Warmup-1',
  name: 'startOz',
  inputs: [
    "('ozymandias')",
    "('bzoo')",
    "('oxx')",
    "('ounce')",
    "('o')",
    "('abc')",
    "('')",
    "('zoo')",
    "('aztec')",
    "('zzzz')",
    "('oznic')",
  ],
  question: `Given a string, return a string made of the first 2 chars (if present),
                 however include first char only if it is 'o' and include the second only if it
                 is 'z', so 'ozymandias' yields 'oz'.`,
},
  {
    title: 'Warmup-1',
    name: 'intMax',
    inputs: [
      '(1, 2, 3)',
      '(1, 3, 2)',
      '(3, 2, 1)',
      '(9, 3, 3)',
      '(3, 9, 3)',
      '(3, 3, 9)',
      '(8, 2, 3)',
      '(-3, -1, -2)',
      '(6, 2, 5)',
      '(5, 6, 2)',
      '(5, 2, 6)',
    ],
    question: 'Given three int values, a b c, return the largest.',
  },
  {
    title: 'Warmup-1',
    name: 'close10',
    inputs: [
      '(8, 13)',
      '(13, 8)',
      '(13, 7)',
      '(7, 13)',
      '(9, 13)',
      '(13, 8)',
      '(10, 12)',
      '(11, 10)',
      '(5, 21)',
      '(0, 20)',
      '(0, 20)',
      '(10, 10)',
    ],
    question: `Given 2 int values, return whichever value is nearest to the value 10,
               or return 0 in the event of a tie. Note that Math.abs(n) returns the absolute
                value of a number.`,
  },
  {
    title: 'Warmup-1',
    name: 'in3050',
    inputs: [
      '(30, 31)',
      '(30, 41)',
      '(40, 50)',
      '(40, 51)',
      '(39, 50)',
      '(50, 39)',
      '(40, 39)',
      '(49, 48)',
      '(50, 40)',
      '(50, 51)',
      '(35, 36)',
      '(35, 45)',
    ],
    question: `Given 2 int values, return true if they are both in the range 30..40
              inclusive, or they are both in the range 40..50 inclusive.`,
  },
  {
    title: 'Warmup-1',
    name: 'max1020',
    inputs: [
      '(11, 19)',
      '(19, 11)',
      '(11, 9)',
      '(9, 21)',
      '(10, 21)',
      '(21, 10)',
      '(9, 11)',
      '(23, 10)',
      '(20, 10)',
      '(7, 20)',
      '(17, 16)',
    ],
    question: `Given 2 positive int values, return the larger value that is in the range
              10..20 inclusive, or return 0 if neither is in that range.`,
  },
  {
    title: 'Warmup-1',
    name: 'stringE',
    inputs: [
      "('Hello')",
      "('Heelle')",
      "('Heelele')",
      "('HII')",
      "('e')",
      "('')",
    ],
    question: 'Return true if the given string contains between 1 and 3 \'e\' chars.',
  },
  {
    title: 'Warmup-1',
    name: 'lastDigit',
    inputs: [
      '(7, 17)',
      '(6, 17)',
      '(3, 113)',
      '(114, 113)',
      '(114, 4)',
      '(10, 0)',
      '(11, 0)',
    ],
    question: `Given two non-negative int values, return true if they have the same
              last digit, such as with 27 and 57. Note that the % 'mod' operator computes
              remainders, so 17 % 10 is 7.`,
  }, {
    title: 'Warmup-1',
    name: 'endUp',
    inputs: [
      "('Hello')",
      "('hi there')",
      "('hi')",
      "('woo hoo')",
      "('xyz12')",
      "('x')",
      "('')",
    ],
    question: `Given a string, return a new string where the last 3 chars are now in
              upper case. If the string has less than 3 chars, uppercase whatever is there.
              Note that str.toUpperCase() returns the uppercase version of a string.`,
  }, {
    title: 'Warmup-1',
    name: 'everyNth',
    inputs: [
      "('Miracle', 2)",
      "('abcdefg', 2)",
      "('abcdefg', 3)",
      "('Chocolate', 3)",
      "('Chocolates', 3)",
      "('Chocolates', 4)",
      "('Chocolates', 100)",
    ],
    question: `Given a non-empty string and an int N, return the string made starting
                with char 0, and then every Nth char of the string. So if N is 3, use char 0, 3, 6,
                 ... and so on. N is 1 or more.`,
  },
  {
    title: 'Warmup-2',
    name: 'stringTimes',
    inputs: [
      "('Hi', 2)",
      "('Hi', 3)",
      "('Hi', 1)",
      "('Hi', 0)",
      "('Hi', 5)",
      "('Oh Boy!', 2)",
      "('x', 4)",
      "('', 4)",
      "('code', 2)",
      "('code', 3)",
    ],
    question: `Given a string and a non-negative int n, return a larger string that is n
      copies of the original string.`,
  }, {
    title: 'Warmup-2',
    name: 'frontTimes',
    inputs: [
      "('Chocolate', 2)",
      "('Chocolate', 3)",
      "('Abc', 3)",
      "('Ab', 4)",
      "('A', 4)",
      "('',4)",
      "('Abc', 0)",
    ],
    question: `Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars,
        or whatever is there if the string is less than length 3. Return n copies of the front.`,
  }, {
    title: 'Warmup-2',
    name: 'countXX',
    inputs: [
      "('abcxx')",
      "('xxx')",
      "('xxxx')",
      "('abc')",
      "('Hello There')",
      "('Hexxo Thxxe')",
      "('')",
      "('Kittens')",
      "('Kittensxxx')",
    ],
    question: `Count the number of 'xx' in the given string. We'll say that overlapping
        is allowed, so 'xxx' contains 2 'xx'.`,
  }, {
    title: 'Warmup-2',
    name: 'doubleX',
    inputs: [
      "('axxbb')",
      "('axaxax')",
      "('xxxxx')",
      "('xaxxx')",
      "('aaaax')",
      "('')",
      "('abc')",
      "('x')",
      "('xx')",
      "('xaxx')",
    ],
    question: `Given a string, return true if the first instance of "x" in the string is
         immediately followed by another "x".`,
  }, {
    title: 'Warmup-2',
    name: 'stringBits',
    inputs: [
      "('Hello')",
      "('Hi')",
      "('Heeololeo')",
      "('HiHiHi')",
      "('')",
      "('Greetings')",
      "('Chocolate')",
      "('pi')",
      "('Hello Kitten')",
      "('hxaxpxpxy')",
    ],
    question: `Given a string, return a new string made of every other char starting
        with the first, so "Hello" yields "Hlo".`,
  }, {
    title: 'Warmup-2',
    name: 'stringSplosion',
    question: 'Given a non-empty string like "Code" return a string like "CCoCodCode".',
    inputs: [], // TODO: write inputs here
  }, {
    title: 'Warmup-2',
    name: 'last2',
    inputs: [
      "('hixxhi')",
      "('xaxxaxaxx')",
      "('axxaaxx')",
      "('xxaxxaxxaxx')",
      "('xaxaxaa')",
      "('xxxx')",
      "('13121312')",
      "('11212')",
      "('13121311')",
      "('hi')",
      "('h')",
      "('')",
    ],
    question: `Given a string, return the count of the number of times that a substring
        length 2 appears in the string and also as the last 2 chars of the string, so
        "hixxxhi" yields 1 (we won't count the end substring).`,
  }, {
    title: 'Warmup-2',
    name: 'arrayCount9',
    inputs: [
      '([1,2,9])',
      '([1,9,9])',
      '([1,9,9,3,9])',
      '([1,2,3])',
      '([])',
      '([4,2,4,3,1])',
      '([9,2,4,3,1])',
    ],
    question: 'Given an array of ints, return the number of 9\'s in the array.',
  }, {
    title: 'Warmup-2',
    name: 'arrayFront9',
    inputs: [
      '([1,2,9,3,4])',
      '([1,2,3,4,9])',
      '([1,2,3,4,5])',
      '([9,2,3])',
      '([1,9,9])',
      '([1,2,3])',
      '([1,9])',
      '([5,5])',
      '([2])',
      '([9])',
      '([])',
      '([3,9,2,3,3])',
    ],
    question: `Given an array of ints, return true if one of the first 4 elements in
        the array is a 9. The array length may be less than 4.`,
  }, {
    title: 'Warmup-2',
    name: 'array123',
    question: `Given an array of ints, return true if the sequence of numbers 1, 2, 3
      appears in the array somewhere.`,
    inputs: [], // TODO
  }, {
    title: 'Warmup-2',
    name: 'stringMatch',
    inputs: [
      "('xxcaazz', 'xxbaaz')",
      "('abc', 'abc')",
      "('abc', 'axc')",
      "('hello', 'he')",
      "('he', 'hello')",
      "('', 'hello')",
      "('aabbccdd', 'abbbxxd')",
      "('aaxxaaxx', 'iaxxai')",
      "('iaxxai', 'aaxxaaxx')",
    ],
    question: `Given 2 strings, a and b, return the number of the positions where they contain the same length 2 substring.
        So "xxcaazz" and "xxbaaz" yields 3, since the "xx" "xx", "aa", and "az" substrings appear in the same place in both strings.`,
  }, {
    title: 'Warmup-2',
    name: 'stringX',
    inputs: [
      "('xxHxix')",
      "('abxxxcd')",
      "('xabxxxcdx')",
      "('xKittenx')",
      "('Hello')",
      "('xx')",
      "('x')",
      "('')",
    ],
    question: `Given a string, return a version where all the "x" have been removed.
          Except an "x" at the very start or end should not be removed.`,
  }, {
    title: 'Warmup-2',
    name: 'altPairs',
    inputs: [
      "('kitten')",
      "('Chocolate')",
      "('CodingHorror')",
      "('yak')",
      "('ya')",
      "('y')",
      "('')",
      "('ThisThatTheOther')",
    ],
    question: `Given a string, return a string made of the chars at indexes 0,1, 4,5, 8,9 ...
          so "kittens" yields "kien".`,
  }, {
    title: 'Warmup-2',
    name: 'stringYak',
    inputs: [
      "('yakpak')",
      "('pakyak')",
      "('yak123ya')",
      "('yak')",
      "('yakxxxyak')",
      "('xxcaazz', 'hiyakHi')",
      "(xxxyakyyyakzzz')",
    ],
    question: `Suppose the string "yak" is unlucky. Given a string, return a version
          where all the "yak" are removed, but the "a" can be any char. The "yak" strings
          will not overlap.`,
  }, {
    title: 'Warmup-2',
    name: 'array667',
    inputs: [
      '([6,6,2])',
      '([6,6,2,6])',
      '([6,7,2,6])',
      '([6,6,2,7,6,7])',
      '([1,6,3])',
      '([6,1])',
      '([])',
      '([3,6,7,6])',
      '([3,6,6,7])',
      '([6,3,6,6])',
      '([6,7,6,6])',
      '([1,2,3,5,6])',
      '([1,2,3,6,6])',
    ],
    question: `Given an array of ints, return the number of times that two 6's
            are next to each other in the array. Also count instances where the second
            "6" is actually a 7.`,
  }, {
    title: 'Warmup-2',
    name: 'noTriples',
    inputs: [
      '([1,1,2,2,1])',
      '([1,1,2,2,2,1])',
      '([1,1,2,2,2,1])',
      '([1,2,1])',
      '([1,1,1])',
      '([1,1])',
      '([1])',
      '([1])',
      '([])',
    ],
    question: `Given an array of ints, we'll say that a triple is a value appearing 3 times
              in a row in the array. Return true if the array does not contain any triples.`,
  }, {
    title: 'Warmup-2',
    name: 'has271',
    inputs: [
      '([1,2,7,1])',
      '([1,2,8,1])',
      '([2,7,1])',
      '([3,8,2])',
      '([2,7,3])',
      '([2,7,4])',
      '([2,7,-1])',
      '([2,7,-2])',
      '([4,5,3,8,0])',
      '([2,7,5,10,4])',
      '([2,7,-2,4,9,3])',
      '([2,7,5,10,1])',
      '([2,7,-2,10,2])',
    ],
    question: `Given an array of ints, return true if it contains a 2, 7, 1
              pattern -- a value, followed by the value plus 5, followed by the value
              minus 1. Additionally the 271 counts even if the "1" differs by 2 or less
              from the correct value.`,
  }, {
    title: 'String-1',
    name: 'helloName',
    inputs: [
      "('Bob')",
      "('Alice')",
      "('X')",
      "('Dolly')",
      "('Alpha')",
      "('Omega')",
      "('Goodbye')",
      "('ho ho ho')",
      "('xyz!')",
      "('Hello!')",
    ],
    question: 'Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".',
  }, {
    title: 'String-1',
    name: 'makeAbba',
    inputs: [
      "('Hi', 'Bye')",
      "('Yo', 'Alice')",
      "('What', 'Up')",
      "('aaa', 'bbb')",
      "('x', 'y')",
      "('x', '')",
      "('ba', 'Ya')",
      "('Ya', 'Ya')",
    ],
    question: `Given two strings, a and b, return the result of putting them together
              in the order abba, e.g. "Hi" and "Bye" returns "HiByeByeHi".`,
  }, {
    title: 'String-1',
    name: 'makeTags',
    question: `The web is built with HTML strings like "<i>Yay</i>" which draws
            Yay as italic text. In this example, the "i" tag makes <i> and </i>
            which surround the word "Yay". Given tag and word strings, create the HTML
            string with tags around the word, e.g. "<i>Yay</i>".`,
    inputs: [
      "('i', 'Yay')",
      "('i', 'Hello')",
      "('cite', 'Yay')",
      "('address', 'here')",
      "('body', 'Heart')",
      "('i', 'i')",
      "('i', 'i')",
      "('i', '')",
    ],
  }, {
    title: 'String-1',
    name: 'makeOutWord',
    inputs: [
      "('<<>>', 'Yay')",
      "('<<>>', 'WooHoo')",
      "('[[]]', 'word')",
      "('HHoo', 'Hello')",
      "('abyz', 'YAY')",
    ],
    question: `Given an "out" string length 4, such as "<<>>", and a word,
              return a new string where the word is in the middle of the out string,
              e.g. "<<word>>". Note: use str.substring(i, j) to extract the String starting
               at index i and going up to but not including index j.`,
  }, {
    title: 'String-1',
    name: 'extraEnd',
    inputs: [
      "('Hello')",
      "('ab')",
      "('Hi')",
      "('Candy')",
      "('Code')",
    ],
    question: `Given a string, return a new string made of 3 copies of the
              last 2 chars of the original string. The string length will be at least 2.`,
  }, {
    title: 'String-1',
    name: 'firstTwo',
    inputs: [
      "('Hello')",
      "('abcdefg')",
      "('ab')",
      "('a')",
      "('')",
      "('kitten')",
      "('hi')",
      "('hiya')",
    ],
    question: `Given a string, return the string made of its first two chars,
              so the String "Hello" yields "He". If the string is shorter than length 2,
              return whatever there is, so "X" yields "X", and the empty string "" yields
              the empty string "". Note that str.length() returns the length of a string.`,
  }, {
    title: 'String-1',
    name: 'firstHalf',
    inputs: [
      "('WooHoo')",
      "('HelloThere')",
      "('abcdefg')",
      "('ab')",
      "('')",
      "('0123456789')",
      "('kitten')",
    ],
    question: 'Given a string of even length, return the first half. So the string "WooHoo" yields "Woo".',
  }, {
    title: 'String-1',
    name: 'withoutEnd',
    inputs: [
      "('Hello')",
      "('java')",
      "('coding')",
      "('code')",
      "('ab')",
      "('Chocolate!')",
      "('kitten')",
      "('woohoo')",
    ],
    question: `Given a string, return a version without the first and last
                char, so "Hello" yields "ell". The string length will be at least 2.`,
  }, {
    title: 'String-1',
    name: 'comboString',
    inputs: [
      "('Hello', 'hi')",
      "('Hi', 'Hello')",
      "('aaa', 'b')",
      "('b', 'aaa')",
      "('aaa', '')",
      "('', 'bb')",
      "('aaa', '1234')",
      "('aaa', 'bb')",
      "('a', 'bb')",
      "('bb', 'a')",
      "('a', 'bb')",
      "('xyz', 'ab')",
    ],
    question: `Given 2 strings, a and b, return a string of the form short+long+short,
                with the shorter string on the outside and the longer string on the inside.
                The strings will not be the same length, but they may be empty (length 0).`,
  }, {
    title: 'String-1',
    name: 'nonStart',
    inputs: [
      "('Hello', 'There')",
      "('java', 'code')",
      "('shotl', 'java')",
      "('ab', 'xy')",
      "('ab', 'x')",
      "('x', 'ac')",
      "('a', 'x')",
      "('kit', 'kat')",
      "('mart', 'dart')",
    ],
    question: `Given 2 strings, return their concatenation, except omit the
                first char of each. The strings will be at least length 1.`,
  }, {
    title: 'String-1',
    name: 'left2',
    inputs: [
      "('Hello')",
      "('java')",
      "('Hi')",
      "('code')",
      "('cat')",
      "('12345')",
      "('Chocolate')",
      "('bricks')",
    ],
    question: `Given a string, return a "rotated left 2" version where the
                first 2 chars are moved to the end. The string length will be at least 2.`,
  }, {
    title: 'String-1',
    name: 'right2',
    inputs: [
      "('Hello')",
      "('java')",
      "('Hi')",
      "('code')",
      "('cat')",
      "('12345')",
    ],
    question: `Given a string, return a "rotated right 2" version where the
                  last 2 chars are moved to the start. The string length will be at least 2.`,
  }, {
    title: 'String-1',
    name: 'theEnd',
    inputs: [
      "('Hello', true)",
      "('Hello', false)",
      "('oh', true)",
      "('oh', false)",
      "('x', true)",
      "('x', false)",
      "('java', true)",
      "('chocolate', false)",
      "('1234', true)",
      "('code', false)",
    ],
    question: `Given a string, return a string length 1 from its front,
            unless front is false, in which case return a string length 1 from its
            back. The string will be non-empty.`,
  }, {
    title: 'String-1',
    name: 'withoutEnd2',
    inputs: [
        "('Hello')",
        "('abc')",
        "('ab')",
        "('a')",
        "('')",
        "('coldy')",
        "('java code')",
      ],
    question: `Given a string, return a version without both the first and
              last char of the string. The string may be any length, including 0.`,
  }, {
      title: 'String-1',
      name: 'middleTwo',
      inputs: [
        "('string')",
        "('code')",
        "('Practice')",
        "('ab')",
        "('123456789')",
      ],
      question: `Given a string of even length, return a string made of the middle two chars, so the string "string" yields "ri".
              The string length will be at least 2.`,
    }, {
      title: 'String-1',
      name: 'endsLy',
      inputs: [
        "('oddly')",
        "('y')",
        "('oddl')",
        "('olydd')",
        "('ly')",
        "('')",
        "('falsely')",
        "('evenly')",
      ],
      question: 'Given a string, return true if it ends in "ly".',
    }, {
      title: 'String-1',
      name: 'nTwice',
      inputs: [
        "('hello', 2)",
        "('Chocolate', 3)",
        "('Chocolate', 1)",
        "('Chocolate', 0)",
        "('Hello', 4)",
        "('Code', 4)",
        "('Code', 2)",
      ],
      index: 62,
      question: `Given a string and an int n, return a string made of the
              first and last n chars from the string. The string length will be at least n.`,
    },
  {
    title: 'String-1',
    name: 'twoChar',
    question: `Given a string and an index, return a string length 2
            starting at the given index. If the index is too big or too small to define
            a string length 2, use the first 2 chars. The string length will be at least 2.`,
    inputs: [
      "('java', 0)",
      "('java', 2)",
      "('java', 3)",
      "('java', 4)",
      "('java', -1)",
      "('Hello', 0)",
      "('Hello', 1)",
      "('Hello', 99)",
      "('Hello', 3)",
      "('Hello', 4)",
      "('Hello', 5)",
      "('Hello', -7)",
      "('Hello', 6)",
      "('Hello', -1)",
      "('yay', 0)",
    ],
  },
  {
    title: 'String-1',
    name: 'middleThree',
    question: `Given a string of odd length, return the string length 3 from its middle, so "Candy" yields "and".
             The string length will be at least 3.`,
    inputs: [
      "('Candy')",
      "('and')",
      "('solving')",
      "('Hi yet Hi')",
      "('java yet java')",
      "('Chocolate')",
      "('XabcxyzabcX')",
    ],
  },
  {
    title: 'String-1',
    name: 'hasBad',
    question: `Given a string, return true if "bad" appears starting at index 0
            or 1 in the string, such as with "badxxx" or "xbadxx" but not "xxbadxx". The
            string may be any length, including 0. Note: use .equals() to compare 2 strings.`,
    inputs: [
      "('badxx')",
      "('xbadxx')",
      "('xxbadxx')",
      "('code')",
      "('bad')",
      "('ba')",
      "('xba')",
      "('xbad')",
      "('')",
      "('badyy')",
    ],
  },
  {
    title: 'String-1',
    name: 'atFirst',
    question: `Given a string, return a string length 2 made of its first 2 chars.
            If the string length is less than 2, use '@' for the missing chars.`,
    inputs: [
      "('hello')",
      "('hi')",
      "('h')",
      "('')",
      "('kitten')",
      "('java')",
      "('j')",
    ],
  },
  {
    title: 'String-1',
    name: 'lastChars',
    question: `Given 2 strings, a and b, return a new string made of the first char of a
            and the last char of b, so "yo" and "java" yields "ya". If either string is length
            0, use '@' for its missing char.`,
    inputs: [
      "('last', 'chars')",
      "('yo', 'java')",
      "('hi', '')",
      "('', 'hello')",
      "('', '')",
      "('kitten', 'hi')",
      "('k', 'zip')",
      "('kitten', '')",
      "('kitten', 'zip')",
    ],
  },
  {
    title: 'String-1',
    name: 'conCat',
    question: `Given two strings, append them together (known as "concatenation")
            and return the result. However, if the concatenation creates a double-char,
            then omit one of the chars, so "abc" and "cat" yields "abcat".`,
    inputs: [
      "('abc', 'cat')",
      "('dog', 'cat')",
      "('abc', '')",
      "('', 'cat')",
      "('pig', 'g')",
      "('pig', 'doggy')",
    ],
  },
  {
    title: 'String-1',
    name: 'lastTwo',
    question: `Given a string of any length, return a new string where the last 2
            chars, if present, are swapped, so "coding" yields "codign".`,
    inputs: [
      "('coding')",
      "('cat')",
      "('ab')",
      "('a')",
      "('')",
    ],
  },
  {
    title: 'String-1',
    name: 'seeColor',
    question: `Given a string, if the string begins with "red" or "blue" return
            that color string, otherwise return the empty string.`,
    inputs: [
      "('redxx')",
      "('xxred')",
      "('blueTimes')",
      "('NoColor')",
      "('red')",
      "('re')",
      "('blu')",
      "('blue')",
      "('a')",
      "('')",
      "('xyzred')",
    ],
  },
  {
    title: 'String-1',
    name: 'frontAgain',
    question: `Given a string, return true if the first 2 chars in the string
            also appear at the end of the string, such as with "edited".`,
    inputs: [
      "('edited')",
      "('edit')",
      "('ed')",
      "('jj')",
      "('jjj')",
      "('jjjj')",
      "('jjjk')",
      "('x')",
      "('')",
      "('java')",
      "('javaja')",
    ],
  },
  {
    title: 'String-1',
    name: 'minCat',
    question: `Given two strings, append them together (known as "concatenation")
            and return the result. However, if the strings are different lengths, omit chars
            from the longer string so it is the same length as the shorter string. So "Hello"
            and "Hi" yield "loHi". The strings may be any length.`,
    inputs: [
      "('Hello', 'Hi')",
      "('Hello', 'java')",
      "('java', 'Hello')",
      "('abc', 'x')",
      "('x', 'abc')",
      "('abc', '')",
    ],
  },
  {
    title: 'String-1',
    name: 'extraFront',
    question: `Given a string, return a new string made of 3 copies of the first 2
            chars of the original string. The string may be any length. If there are fewer than 2
            chars, use whatever is there.`,
    inputs: [
      "('Hello')",
      "('ab')",
      "('H')",
      "('')",
      "('Candy')",
      "('Code')",
    ],
  },
  {
    title: 'String-1',
    name: 'without2',
    question: `Given a string, if a length 2 substring appears at both its beginning and
    end, return a string without the substring at the beginning, so "HelloHe" yields
    "lloHe". The substring may overlap with itself, so "Hi" yields "". Otherwise, return
    the original string unchanged.`,
    inputs: [
      "('HelloHe')",
      "('HelloHi')",
      "('Hi')",
      "('Chocolate')",
      "('xxx')",
      "('xx')",
      "('x')",
      "('')",
      "('Fruits')",
    ],
  },
  {
    title: 'String-1',
    name: 'deFront',
    question: `Given a string, return a version without the first 2 chars. Except keep the
    first char if it is 'a' and keep the second char if it is 'b'. The string may be any
    length. Harder than it looks.`,
    inputs: [
      "('Hello')",
      "('java')",
      "('away')",
      "('axy')",
      "('abc')",
      "('xby')",
      "('ab')",
      "('ax')",
      "('axb')",
      "('aaa')",
      "('xbc')",
      "('bbb')",
      "('bazz')",
      "('ba')",
      "('abxyz')",
      "('hi')",
      "('his')",
      "('xz')",
      "('zzz')",
    ],
  },
  {
    title: 'String-1',
    name: 'startWord',
    question: `Given a string and a second "word" string, we'll say that the word matches
    the string if it appears at the front of the string, except its first char does not
    need to match exactly. On a match, return the front of the string, or otherwise return
    the empty string. So, so with the string "hippo" the word "hi" returns "hi" and "xip"
    returns "hip". The word will be at least length 1.`,
    inputs: [
      "('hippo', 'hi')",
      "('hippo', 'xip')",
      "('hippo', 'i')",
      "('hippo', 'ix')",
      "('h', 'ix')",
      "('', 'i')",
      "('hip', 'zi')",
      "('hip', 'zip')",
      "('hip', 'zig')",
      "('h', 'z')",
      "('hippo', 'xippo')",
      "('hippo', 'xyz')",
      "('hippo', 'hip')",
      "('kitten', 'cit')",
      "('kit', 'cit')",
    ],
  },
  {
    title: 'String-1',
    name: 'withoutX ',
    question: `Given a string, if the first or last chars are 'x', return the string
    without those 'x' chars, and otherwise return the string unchanged.`,
    inputs: [
      "('xHix')",
      "('xHi')",
      "('Hxix')",
      "('Hi')",
      "('xxHi')",
      "('Hix')",
      "('xaxbx')",
      "('xx')",
      "('x')",
      "('')",
      "('Hello')",
      "('Hexllo')",
    ],
  },
  {
    title: 'String-1',
    name: 'withoutX2',
    question: `Given a string, if one or both of the first 2 chars is 'x', return the
    string without those 'x' chars, and otherwise return the string unchanged. This
    is a little harder than it looks.`,
    inputs: [
      "('xHi')",
      "('Hxi')",
      "('Hi')",
      "('xxHi')",
      "('Hix')",
      "('xaxb')",
      "('xx')",
      "('x')",
      "('')",
      "('Hello')",
      "('Hexllo')",
      "('xHxllo')",
    ],
  },

  {
    title: 'AP-1',
    name: 'scoresIncreasing',
    question: 'Given an array of scores, return true if each score is equal or greater than the one before. The array will be length 2 or more.',
    inputs: [
      '([1, 3, 4])',
      '([1, 3, 2])',
      '([1, 1, 4])',
      '([1, 1, 2, 4, 4, 7])',
      '([1, 1, 2, 4, 3, 7])',
      '([-5, 4, 11])',
    ],
  },
  {
    title: 'AP-1',
    name: 'scores100',
    question: 'Given an array of scores, return true if there are scores of 100 next to each other in the array. The array length will be at least 2.',
    inputs: [
      '([1, 100, 100])',
      '([1, 100, 99, 100])',
      '([100, 1, 100, 100])',
      '([100, 1, 100, 1])',
      '([1, 2, 3, 4, 5])',
      '([1, 2, 100, 4, 5])',
    ],
  },
];
